
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e5  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000149  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000192  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017d  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
  6c:	23 e0       	ldi	r18, 0x03	; 3
  6e:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  70:	33 e8       	ldi	r19, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  72:	08 c0       	rjmp	.+16     	; 0x84 <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  74:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
  76:	28 b7       	in	r18, 0x38	; 56
  78:	21 60       	ori	r18, 0x01	; 1
  7a:	28 bf       	out	0x38, r18	; 56
		WDR();
  7c:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	00 fe       	sbrs	r0, 0
  82:	fd cf       	rjmp	.-6      	; 0x7e <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	b0 f7       	brcc	.-20     	; 0x74 <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  88:	13 be       	out	0x33, r1	; 51
  8a:	08 95       	ret

0000008c <main>:
{
	note noteA;
	noteA.freq = A;
	noteA.duration = whole;
	float t = 11.36;
	SET_BIT(DDRA, 0);
  8c:	d0 9a       	sbi	0x1a, 0	; 26
	for(;;) {
		SET_BIT(PORTA, 1);
  8e:	d9 9a       	sbi	0x1b, 1	; 27
		wait_avr(t); // set time
  90:	8b e0       	ldi	r24, 0x0B	; 11
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
		CLR_BIT(PORTA, 1);
  98:	d9 98       	cbi	0x1b, 1	; 27
		wait_avr(t); // set time
  9a:	8b e0       	ldi	r24, 0x0B	; 11
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
  a2:	f5 cf       	rjmp	.-22     	; 0x8e <main+0x2>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
